{
  
    
        "post0": {
            "title": "SQL - Hands-on",
            "content": "SQL is one of the important skill for Machine learning Engineer and Data scientists. . SQL can be broken into subsets. SQL is used as . Data Manipulation Language. | Data Defenition Language. | Data Control Language. | Data Defenition Language (DDL) : . creating database, tables and assigning columns or attributes to each table. . Data Manipulation Language (DML) : . Manipulating data to get answers from data or source data to seperate table.(SELECT, READ, UPDATE, DELETE.) . we will focus more on DML. . Data Manipulation : . import pandas as pd import sqlalchemy . engine = sqlalchemy.create_engine(&quot;mysql+pymysql://root:password@localhost:3306/imdb&quot;) con = engine.connect() . def query(sql_query, connection=con): return pd.read_sql_query(sql_query, connection) . IMDB dataset contains data about movies, genre, rankscore, actors and directors in particular movie. . It has data ranging from 1888 to 2008. . Tables in IMDB dataset are : . query(&#39;SHOW TABLES;&#39;) . Tables_in_imdb . 0 actors | . 1 directors | . 2 directors_genres | . 3 movies | . 4 movies_directors | . 5 movies_genres | . 6 roles | . Attributes in each tables are : . for table in query(&#39;SHOW TABLES;&#39;)[&#39;Tables_in_imdb&#39;]: display(f&quot;{table} : &quot;, query(f&#39;DESCRIBE {table};&#39;)) . &#39;actors : &#39; . Field Type Null Key Default Extra . 0 id | int | NO | PRI | 0 | | . 1 first_name | varchar(100) | YES | MUL | None | | . 2 last_name | varchar(100) | YES | MUL | None | | . 3 gender | char(1) | YES | | None | | . &#39;directors : &#39; . Field Type Null Key Default Extra . 0 id | int | NO | PRI | 0 | | . 1 first_name | varchar(100) | YES | MUL | None | | . 2 last_name | varchar(100) | YES | MUL | None | | . &#39;directors_genres : &#39; . Field Type Null Key Default Extra . 0 director_id | int | NO | PRI | None | | . 1 genre | varchar(100) | NO | PRI | None | | . 2 prob | float | YES | | None | | . &#39;movies : &#39; . Field Type Null Key Default Extra . 0 id | int | NO | PRI | 0 | | . 1 name | varchar(100) | YES | MUL | None | | . 2 year | int | YES | | None | | . 3 rankscore | float | YES | | None | | . &#39;movies_directors : &#39; . Field Type Null Key Default Extra . 0 director_id | int | NO | PRI | None | | . 1 movie_id | int | NO | PRI | None | | . &#39;movies_genres : &#39; . Field Type Null Key Default Extra . 0 movie_id | int | NO | PRI | None | | . 1 genre | varchar(100) | NO | PRI | None | | . &#39;roles : &#39; . Field Type Null Key Default Extra . 0 actor_id | int | NO | PRI | None | | . 1 movie_id | int | NO | PRI | None | | . 2 role | varchar(100) | NO | PRI | None | | . ## but lets look only whats inside movies table query(&#39;SELECT * FROM movies&#39;) . id name year rankscore . 0 0 | #28 | 2002 | NaN | . 1 1 | #7 Train: An Immigrant Journey, The | 2000 | NaN | . 2 2 | $ | 1971 | 6.4 | . 3 3 | $1,000 Reward | 1913 | NaN | . 4 4 | $1,000 Reward | 1915 | NaN | . ... ... | ... | ... | ... | . 388264 412316 | &quot;zem blch krlu&quot; | 1991 | NaN | . 388265 412317 | &quot;rgammk&quot; | 1995 | NaN | . 388266 412318 | &quot;zgnm Leyla&quot; | 2002 | NaN | . 388267 412319 | &quot; Istanbul&quot; | 1983 | NaN | . 388268 412320 | &quot;sterreich&quot; | 1958 | NaN | . 388269 rows × 4 columns . there are total of 388269 movies in imdb dataset. . query(&quot;SELECT name, year FROM movies;&quot;) . name year . 0 #28 | 2002 | . 1 #7 Train: An Immigrant Journey, The | 2000 | . 2 $ | 1971 | . 3 $1,000 Reward | 1913 | . 4 $1,000 Reward | 1915 | . ... ... | ... | . 388264 &quot;zem blch krlu&quot; | 1991 | . 388265 &quot;rgammk&quot; | 1995 | . 388266 &quot;zgnm Leyla&quot; | 2002 | . 388267 &quot; Istanbul&quot; | 1983 | . 388268 &quot;sterreich&quot; | 1958 | . 388269 rows × 2 columns . LIMIT . query(&quot;SELECT name, rankscore from movies LIMIT 10&quot;) . name rankscore . 0 #28 | NaN | . 1 #7 Train: An Immigrant Journey, The | NaN | . 2 $ | 6.4 | . 3 $1,000 Reward | NaN | . 4 $1,000 Reward | NaN | . 5 $1,000 Reward | NaN | . 6 $1,000,000 Duck | 5.0 | . 7 $1,000,000 Reward, The | NaN | . 8 $10,000 Under a Pillow | NaN | . 9 $100,000 | NaN | . OFFSET . #lets see next 10 rows query(&quot;SELECT name, rankscore from movies LIMIT 10 OFFSET 10&quot;) . name rankscore . 0 $100,000 Pyramid, The | NaN | . 1 $1000 a Touchdown | 6.7 | . 2 $20,000 Carat, The | NaN | . 3 $21 a Day Once a Month | NaN | . 4 $2500 Bride, The | NaN | . 5 $30 | 7.5 | . 6 $30,000 | NaN | . 7 $300 y tickets | NaN | . 8 $40,000 | 9.6 | . 9 $5,000 Reward | NaN | . ORDER BY . # in SQL this is done by ORDER BY [column] cmd # we will see first 10 movies in Databse query(&quot;SELECT name, rankscore, year FROM movies ORDER BY year LIMIT 10&quot;) . name rankscore year . 0 Roundhay Garden Scene | NaN | 1888 | . 1 Traffic Crossing Leeds Bridge | NaN | 1888 | . 2 Monkeyshines, No. 2 | NaN | 1890 | . 3 Monkeyshines, No. 1 | 7.3 | 1890 | . 4 Monkeyshines, No. 3 | NaN | 1890 | . 5 Duncan Smoking | 3.6 | 1891 | . 6 Newark Athlete | 4.3 | 1891 | . 7 Duncan or Devonald with Muslin Cloud | 3.5 | 1891 | . 8 Monkey and Another, Boxing | 3.2 | 1891 | . 9 Duncan and Another, Blacksmith Shop | 3.5 | 1891 | . # lets sort our dataset to descending order # this is done by adding DESC cmd to query after ORDER BY [ex : SELECT &lt;query&gt; FROM &lt;table&gt; ORDER BY &lt;column&gt; DESC query(&quot;SELECT name, rankscore, year FROM movies ORDER BY year DESC LIMIT 10&quot;) . name rankscore year . 0 Harry Potter and the Half-Blood Prince | None | 2008 | . 1 Tripoli | None | 2007 | . 2 War of the Red Cliff, The | None | 2007 | . 3 Rapunzel Unbraided | None | 2007 | . 4 Spider-Man 3 | None | 2007 | . 5 Untitled Star Trek Prequel | None | 2007 | . 6 DragonBall Z | None | 2007 | . 7 Harry Potter and the Order of the Phoenix | None | 2007 | . 8 Andrew Henry&#39;s Meadow | None | 2006 | . 9 American Rain | None | 2006 | . DISTINCT . query(&quot;SELECT DISTINCT genre FROM movies_genres&quot;) . genre . 0 Documentary | . 1 Short | . 2 Comedy | . 3 Crime | . 4 Western | . 5 Family | . 6 Animation | . 7 Drama | . 8 Romance | . 9 Mystery | . 10 Thriller | . 11 Adult | . 12 Music | . 13 Action | . 14 Fantasy | . 15 Sci-Fi | . 16 Horror | . 17 War | . 18 Musical | . 19 Adventure | . 20 Film-Noir | . There are total of 20 different genre in movies. Each movie can compose one or more of each genre. . query(&quot;SELECT DISTINCT first_name, last_name FROM directors;&quot;) . first_name last_name . 0 Todd | 1 | . 1 Les | 12 Poissons | . 2 Lejaren | a&#39;Hiller | . 3 Nian | A | . 4 Khairiya | A-Mansour | . ... ... | ... | . 86839 Yusuf | Ünal | . 86840 Ahmet | Ündag | . 86841 Idil | Üner | . 86842 Yüksel | Ünsal | . 86843 Ahmet | Üstel | . 86844 rows × 2 columns . WHERE . # lets have a look at data where movie rankscore are greater than 9 query(&quot;SELECT name, rankscore FROM movies WHERE rankscore &gt; 9&quot;) . name rankscore . 0 $40,000 | 9.6 | . 1 +1 -1 | 9.6 | . 2 12 (2003/II) | 9.8 | . 3 12 stulyev | 9.3 | . 4 14 Million Dreams | 9.5 | . ... ... | ... | . 1064 gigr f | 9.5 | . 1065 tat critique | 9.1 | . 1066 tre avec | 9.4 | . 1067 lm savasisi | 9.7 | . 1068 ltima llamada, La (1996/I) | 9.5 | . 1069 rows × 2 columns . # lets limit to top scoring 10 movies query(&quot;SELECT name, rankscore FROM movies WHERE rankscore &gt; 9 ORDER BY rankscore DESC LIMIT 10&quot;) . name rankscore . 0 Blow Job | 9.9 | . 1 Duminica la ora 6 | 9.9 | . 2 Complex Sessions, The | 9.9 | . 3 Devil&#39;s Circus, The | 9.9 | . 4 Duck Soup | 9.9 | . 5 Atunci i-am condamnat pe toti la moarte | 9.9 | . 6 Dosti | 9.9 | . 7 Dawn of the Friend | 9.9 | . 8 Distinto amanecer | 9.9 | . 9 Clearing, The | 9.9 | . query(&quot;SELECT * FROM movies_genres WHERE genre=&#39;comedy&#39;;&quot;) . movie_id genre . 0 2 | Comedy | . 1 6 | Comedy | . 2 8 | Comedy | . 3 11 | Comedy | . 4 15 | Comedy | . ... ... | ... | . 56420 378583 | Comedy | . 56421 378594 | Comedy | . 56422 378597 | Comedy | . 56423 378613 | Comedy | . 56424 378614 | Comedy | . 56425 rows × 2 columns . 56k movies in our dataset are comedy genre based. . query(&quot;SELECT * FROM movies_genres WHERE genre != &#39;Horror&#39;;&quot;) . movie_id genre . 0 1 | Documentary | . 1 1 | Short | . 2 2 | Comedy | . 3 2 | Crime | . 4 5 | Western | . ... ... | ... | . 388073 378612 | Adventure | . 388074 378612 | Drama | . 388075 378613 | Comedy | . 388076 378613 | Drama | . 388077 378614 | Comedy | . 388078 rows × 2 columns . # we should use &lt;column&gt; IS NULL or &lt;column&gt; IS NOT NULL # lets filter movies with zero rankscore query(&quot;SELECT name, rankscore, year FROM movies WHERE rankscore IS NULL&quot;) . name rankscore year . 0 #28 | None | 2002 | . 1 #7 Train: An Immigrant Journey, The | None | 2000 | . 2 $1,000 Reward | None | 1913 | . 3 $1,000 Reward | None | 1915 | . 4 $1,000 Reward | None | 1923 | . ... ... | ... | ... | . 321019 &quot;zem blch krlu&quot; | None | 1991 | . 321020 &quot;rgammk&quot; | None | 1995 | . 321021 &quot;zgnm Leyla&quot; | None | 2002 | . 321022 &quot; Istanbul&quot; | None | 1983 | . 321023 &quot;sterreich&quot; | None | 1958 | . 321024 rows × 3 columns . in our IMDB dataset, we have 321K movies with no rankscore. . query(&quot;SELECT name, rankscore, year FROM movies WHERE rankscore IS NOT NULL&quot;) . name rankscore year . 0 $ | 6.4 | 1971 | . 1 $1,000,000 Duck | 5.0 | 1971 | . 2 $1000 a Touchdown | 6.7 | 1939 | . 3 $30 | 7.5 | 1999 | . 4 $40,000 | 9.6 | 1996 | . ... ... | ... | ... | . 67240 berleben in New York | 6.9 | 1989 | . 67241 vegtigris | 8.7 | 2001 | . 67242 Kagiti | 8.2 | 1981 | . 67243 nc sayfa | 7.0 | 1999 | . 67244 . 19,99 | 6.3 | 1998 | . 67245 rows × 3 columns . we have only 67244 movies with rankscore. Now for our problem statement if rankscore is an important parameter and if we filter all NULL rankscore movies. we get only 67k movies. . that constitutes only 30% of our original dataset. . Different logical Operators used are : . AND, OR, NOT, ALL, ANY, BETWEEN, EXISTS, IN, LIKE, SOME . query(&quot;SELECT name, year, rankscore FROM movies WHERE rankscore &gt;9 and year &gt;2000 ORDER BY year;&quot;) . name year rankscore . 0 American Exile | 2001 | 9.1 | . 1 Aquarium, L&#39; | 2001 | 9.5 | . 2 Arregui, la noticia del da | 2001 | 9.5 | . 3 Barrio Murders, The | 2001 | 9.2 | . 4 Berlin Babylon | 2001 | 9.3 | . ... ... | ... | ... | . 245 Tomorrow&#39;s Memoir | 2004 | 9.7 | . 246 Trollywood | 2004 | 9.5 | . 247 Two Days with Juliet | 2004 | 9.6 | . 248 White Like Me | 2004 | 9.4 | . 249 Yes and | 2004 | 9.3 | . 250 rows × 3 columns . ANY and ALL conditions are mostly used along with SUBQUERIES. . query(&quot;SELECT name, year, rankscore FROM movies WHERE year BETWEEN 1999 AND 2000;&quot;) . name year rankscore . 0 #7 Train: An Immigrant Journey, The | 2000 | NaN | . 1 $30 | 1999 | 7.5 | . 2 $pent | 2000 | 4.3 | . 3 &amp; frres | 2000 | NaN | . 4 &#39;60s, The | 1999 | NaN | . ... ... | ... | ... | . 22614 &quot;rgang 1900&quot; | 1999 | NaN | . 22615 &quot;a s&#39;en va et a revient&quot; | 2000 | NaN | . 22616 &quot;tat d&#39;alerte&quot; | 1999 | NaN | . 22617 &quot;v Hangja, Az&quot; | 2000 | NaN | . 22618 &quot;... Coitado!&quot; | 1999 | NaN | . 22619 rows × 3 columns . query(&quot;SELECT director_id, genre FROM directors_genres WHERE genre IN(&#39;comedy&#39;, &#39;horror&#39;);&quot;) . director_id genre . 0 8 | Comedy | . 1 10 | Comedy | . 2 12 | Comedy | . 3 18 | Comedy | . 4 22 | Comedy | . ... ... | ... | . 23754 88790 | Comedy | . 23755 88794 | Comedy | . 23756 88795 | Comedy | . 23757 88796 | Comedy | . 23758 88800 | Comedy | . 23759 rows × 2 columns . query(&quot;SELECT name,year,rankscore FROM movies WHERE name LIKE &#39;Tis%%&#39;;&quot;) . name year rankscore . 0 Tis a Gift to Be Simple | 1994 | 8.2 | . 1 Tis an Ill Wind That Blows No Good | 1909 | NaN | . 2 Tis an Till Wind That Blows No Good | 1912 | NaN | . 3 Tis kakomoiras | 1963 | 9.5 | . 4 Tis mias drakmis ta giasemia | 1960 | NaN | . 5 Tis moiras t&#39; apopaidi | 1925 | NaN | . 6 Tis nyhtas ta kamomata | 1957 | NaN | . 7 Tis the Season | 1994 | NaN | . 8 Tis the Season | 1998 | 9.0 | . 9 Tis tyhis ta grammena | 1957 | NaN | . 10 Tis zilias ta kamomata | 1971 | NaN | . 11 Tis&#39; the Season to be Jolly | 1993 | NaN | . 12 Tisane des sarments, La | 1980 | NaN | . 13 Tisc za jednu noc | 1932 | NaN | . 14 Tisch No. 6 | 1998 | NaN | . 15 Tisch, Der | 1981 | NaN | . 16 Tisch, Der | 1998 | NaN | . 17 Tischlein deck Dich, Esel streck Dich, Knppel ... | 1938 | NaN | . 18 Tischlein, deck dich (1956/I) | 1956 | 6.0 | . 19 Tischlein, deck dich (1956/II) | 1956 | NaN | . 20 Tiscrocn vcela | 1983 | 8.5 | . 21 Tish | 1942 | 6.0 | . 22 Tish&#39;s Spy | 1915 | NaN | . 23 Tishe! | 2002 | 8.7 | . 24 Tishina | 1964 | NaN | . 25 Tishina | 1991 | NaN | . 26 Tishina v Kambodzha | 1993 | NaN | . 27 Tishkach Mizeh, Shoom Davar Lo Karah | 1998 | NaN | . 28 Tishomingo Blues | 2005 | NaN | . 29 Tisina | 2000 | NaN | . 30 Tisine | 1972 | NaN | . 31 Tisnove volani | 1985 | NaN | . 32 Tisoy | 1977 | NaN | . 33 Tissage la main de la toile | 1929 | NaN | . 34 Tisserands du pouvoir II: La Rvolte, Les | 1988 | 4.2 | . 35 Tissuespotting | 1998 | NaN | . 36 Tistega lepega dne | 1962 | 7.9 | . 37 Tisto: Another Day at the Office | 2003 | NaN | . 38 Tisto: Live in Concert | 2003 | NaN | . 39 Tisucu devetsto devedeset prva | 1991 | NaN | . 40 Tisucu godina | 1992 | NaN | . 41 Tiswahun | 1955 | NaN | . 42 Tisza-szi vzlatok | 1963 | NaN | . 43 Tiszavirg | 1938 | NaN | . 44 Tiszta Amerika | 1987 | 5.2 | . 45 Tisztelet a kivtelnek | 1936 | NaN | . 46 Tisztelet...S | 2001 | NaN | . 47 Tisztelt cm | 1971 | NaN | . 48 Tisztessg nevben, A | 1920 | NaN | . 49 Tiszti kardbojt, A | 1915 | NaN | . 50 Tisztttz | 1918 | NaN | . query(&quot;SELECT first_name, last_name FROM actors WHERE first_name LIKE &#39;agn_s&#39;;&quot;) . first_name last_name . 0 Agnès | Bouloche | . 1 Agnes | Wilke | . 2 Agnes | Adams | . 3 Agnes | Aker | . 4 Agnès | Akopian | . ... ... | ... | . 287 Ágnes | Zakar | . 288 Agnes | Zakreta | . 289 Ágnes | Zsíros | . 290 Agnes | Öberg | . 291 Agnes | Östergren | . 292 rows × 2 columns . query(&quot;SELECT first_name, last_name FROM actors WHERE first_name LIKE &#39;%%es&#39;&quot;) . first_name last_name . 0 James | 52X | . 1 Tørres | Aadland | . 2 Charles | Aaron | . 3 Reyes | Abades | . 4 Jean-Jacques | Abadie | . ... ... | ... | . 10295 Lourdes | Zuriaga | . 10296 Ines | Álvarez | . 10297 Lourdes | Ávalos | . 10298 Agnes | Öberg | . 10299 Agnes | Östergren | . 10300 rows × 2 columns . Aggregate Functions : . COUNT, MIN, MAX, SUM, AVG . query(&quot;SELECT MIN(year) from movies;&quot;) . MIN(year) . 0 1888 | . query(&quot;SELECT MAX(year) FROM movies;&quot;) . MAX(year) . 0 2008 | . query(&quot;SELECT COUNT(*) FROM movies;&quot;) . COUNT(*) . 0 388269 | . query(&quot;SELECT COUNT(*) FROM movies WHERE year &gt; 2000&quot;) . COUNT(*) . 0 46006 | . GROUP BY with COUNTS . query(&quot;SELECT year, count(year) FROM movies GROUP BY year&quot;) . year count(year) . 0 2002 | 12056 | . 1 2000 | 11643 | . 2 1971 | 4072 | . 3 1913 | 3690 | . 4 1915 | 3722 | . ... ... | ... | . 115 2007 | 7 | . 116 1891 | 6 | . 117 2008 | 1 | . 118 1890 | 3 | . 119 1888 | 2 | . 120 rows × 2 columns . query(&quot;SELECT year, COUNT(year) year_count FROM movies GROUP BY year ORDER BY year_count&quot;) . year year_count . 0 2008 | 1 | . 1 1893 | 2 | . 2 1888 | 2 | . 3 1890 | 3 | . 4 1891 | 6 | . ... ... | ... | . 115 1999 | 10976 | . 116 2000 | 11643 | . 117 2001 | 11690 | . 118 2003 | 11890 | . 119 2002 | 12056 | . 120 rows × 2 columns . HAVING . WHERE is applied on individual rows while HAVING is applied on groups | HAVING is applied after grouping while WHERE is used before grouping. . Order of execution: . GROUP BY to create groups | apply the AGGREGATE FUNCTION | Apply HAVING condition. | | query(&quot;SELECT year, COUNT(year) year_count FROM movies GROUP BY year HAVING year_count&gt;1000;&quot;) . year year_count . 0 2002 | 12056 | . 1 2000 | 11643 | . 2 1971 | 4072 | . 3 1913 | 3690 | . 4 1915 | 3722 | . ... ... | ... | . 92 1945 | 1557 | . 93 1928 | 2051 | . 94 1936 | 2355 | . 95 1953 | 2549 | . 96 1926 | 2137 | . 97 rows × 2 columns . JOIN . display(query(&quot;DESCRIBE movies;&quot;)) display(query(&quot;DESCRIBE movies_genres;&quot;)) . Field Type Null Key Default Extra . 0 id | int | NO | PRI | 0 | | . 1 name | varchar(100) | YES | MUL | None | | . 2 year | int | YES | | None | | . 3 rankscore | float | YES | | None | | . Field Type Null Key Default Extra . 0 movie_id | int | NO | PRI | None | | . 1 genre | varchar(100) | NO | PRI | None | | . query(&quot;SELECT name, rankscore, genre FROM movies JOIN movies_genres ON movies.id = movies_genres.movie_id &quot;) . name rankscore genre . 0 #7 Train: An Immigrant Journey, The | NaN | Documentary | . 1 #7 Train: An Immigrant Journey, The | NaN | Short | . 2 $ | 6.4 | Comedy | . 3 $ | 6.4 | Crime | . 4 $1,000 Reward | NaN | Western | . ... ... | ... | ... | . 395114 nz de mihlarim | NaN | Adventure | . 395115 nz de mihlarim | NaN | Drama | . 395116 egar a gerist | NaN | Comedy | . 395117 egar a gerist | NaN | Drama | . 395118 . 19,99 | 6.3 | Comedy | . 395119 rows × 3 columns . The above query can also written in a neat readable format like the one below . query(&quot;SELECT m.name, m.rankscore, g.genre FROM movies m JOIN movies_genres g ON m.id=g.movie_id &quot;) . name rankscore genre . 0 #7 Train: An Immigrant Journey, The | NaN | Documentary | . 1 #7 Train: An Immigrant Journey, The | NaN | Short | . 2 $ | 6.4 | Comedy | . 3 $ | 6.4 | Crime | . 4 $1,000 Reward | NaN | Western | . ... ... | ... | ... | . 395114 nz de mihlarim | NaN | Adventure | . 395115 nz de mihlarim | NaN | Drama | . 395116 egar a gerist | NaN | Comedy | . 395117 egar a gerist | NaN | Drama | . 395118 . 19,99 | 6.3 | Comedy | . 395119 rows × 3 columns . here m and g are table alias for movies and movies_genres table respectively . Natural JOIN . JOIN where we have same columns in two tables . query(&quot;SELECT * FROM directors_genres JOIN movies_directors USING(director_id)&quot;) . director_id genre prob movie_id . 0 2 | Short | 1.0 | 281325 | . 1 3 | Drama | 1.0 | 30621 | . 2 3 | Drama | 1.0 | 304743 | . 3 5 | Documentary | 1.0 | 63525 | . 4 6 | Drama | 1.0 | 118137 | . ... ... | ... | ... | ... | . 1732701 88797 | Drama | 1.0 | 172648 | . 1732702 88798 | Adventure | 1.0 | 350996 | . 1732703 88799 | Short | 1.0 | 189713 | . 1732704 88800 | Animation | 1.0 | 105513 | . 1732705 88800 | Comedy | 1.0 | 105513 | . 1732706 rows × 4 columns . # Inner join (default) vs left outer vs right outer vs full-outer join. . query(&quot;SELECT m.name, g.genre from movies m LEFT JOIN movies_genres g ON m.id=g.movie_id LIMIT 20;&quot;) . name genre . 0 173 St.G.B. Blutschande | None | . 1 51 StGB | None | . 2 a Maior | Comedy | . 3 apkin gelin | Romance | . 4 arkadas | Drama | . 5 arkadas | Romance | . 6 arkadas | Drama | . 7 arrivata la parigina | None | . 8 arrivato il cavaliere! | Comedy | . 9 arrivato l&#39;accordatore | None | . 10 arrivato mio fratello | Comedy | . 11 baba torik | Comedy | . 12 baba torik | Fantasy | . 13 bas l&#39;ternit | Short | . 14 bas les hommes | Short | . 15 Beira do Rio | Documentary | . 16 belles dents | Drama | . 17 bicyclette | None | . 18 bientt, j&#39;espre | Documentary | . 19 Biribi, disciplinaires franais | None | . # lets join actors table with their roles and their respective movies. query(&quot;SELECT a.first_name, a.last_name FROM actors a JOIN roles r ON a.id=r.actor_id&quot;) . first_name last_name . 0 Michael | &#39;babeepower&#39; Viera | . 1 Michael | &#39;babeepower&#39; Viera | . 2 Eloy | &#39;Chincheta&#39; | . 3 Dieguito | &#39;El Cigala&#39; | . 4 Antonio | &#39;El de Chipiona&#39; | . ... ... | ... | . 3431961 Herdís | Þorvaldsdóttir | . 3431962 Katla Margrét | Þorvaldsdóttir | . 3431963 Lilja Nótt | Þórarinsdóttir | . 3431964 Hólmfríður | Þórhallsdóttir | . 3431965 Theódóra | Þórðardóttir | . 3431966 rows × 2 columns . Note :JOINS are computationally very expensive if number of rows are large. . Sub-Queries or Nested Queries or Inner Queries . Task :Lets take a movie and list all actors acted in that. For this i need to use 3 tables : . * movies = movie name * roles = to get actor_id * actors = get first_name &amp; last_name . lets choose a movie : &#39;istanbul&#39; . query(&quot;SELECT first_name, last_name FROM actors WHERE id IN (SELECT actor_id FROM roles WHERE movie_id IN (SELECT id FROM movies WHERE name=&#39;istanbul&#39;));&quot;) . first_name last_name . 0 Jan | Arvan | . 1 Bobker | Ben Ali | . 2 Martin (I) | Benson | . 3 John (I) | Bentley | . 4 François | Beukelaers | . 5 David (I) | Bond | . 6 Timothy | Bottoms | . 7 George | Calliga | . 8 Albert | Carrier | . 9 Amid | Chakir | . 10 Nat &#39;King&#39; | Cole | . 11 Edward | Colmans | . 12 Franco | Corsaro | . 13 Michael (I) | Dale | . 14 Eddy | De Wilde | . 15 Dominique | Deruddere | . 16 Brad | Dourif | . 17 Leif | Erickson | . 18 Errol (I) | Flynn | . 19 David | Gartenkraut | . 20 Fons | Goris | . 21 Sami | Hazinses | . 22 Ted | Hecht | . 23 Engin | Inal | . 24 Celal | Khosrowshahi | . 25 Werner | Klemperer | . 26 Frederic | Melchior | . 27 Nico | Minardos | . 28 Robert (I) | Morley | . 29 Peter (II) | Norman | . 30 Sverre Anker | Ousdal | . 31 Manuel | París | . 32 Jozef | Pellens | . 33 Michael | Raffetto | . 34 Otto | Reichow | . 35 Senne | Rouffaer | . 36 Vladimir (I) | Sokoloff | . 37 Pierre | Stahre | . 38 Merdan | Taner | . 39 Torin | Thatcher | . 40 Paul | Thierry | . 41 Ludo | Troch | . 42 Daniel | van Avermaet | . 43 Roland | Varno | . 44 Alexandre | von Sivers | . 45 Nüvit | Özdogru | . 46 Arzu | Bazman | . 47 Charlotte | Berden | . 48 Chris | Boni | . 49 Cornell | Borchers | . 50 Ingrid | De Vos | . 51 Lena | Endre | . 52 Peri | Hatman | . 53 Emma | Kihlberg | . 54 Peggy | Knudsen | . 55 Danielle | Laurent | . 56 Didi | Ramati | . 57 Hillevi | Rombin | . 58 Meltem | Savci | . 59 Jillian | Twigger Moul | . EXISTS, ANY, ALL . EXISTS returns true if the subquery returns one or more records or NULL | ANY operator returns TRUE if any of the subquery values meet the condition. | ALL operator returns TRUE if all of the subquery values meet the condition. | . query(&quot;SELECT * FROM movies WHERE rankscore &gt;= ALL (SELECT MAX(rankscore) FROM movies);&quot;) . id name year rankscore . 0 23608 | Atunci i-am condamnat pe toti la moarte | 1971 | 9.9 | . 1 41537 | Blow Job | 2002 | 9.9 | . 2 65522 | Clearing, The | 2001 | 9.9 | . 3 68770 | Complex Sessions, The | 1994 | 9.9 | . 4 79678 | Dawn of the Friend | 2004 | 9.9 | . 5 84983 | Devil&#39;s Circus, The | 1926 | 9.9 | . 6 87894 | Distinto amanecer | 1943 | 9.9 | . 7 91477 | Dosti | 1964 | 9.9 | . 8 94558 | Duck Soup | 1942 | 9.9 | . 9 95123 | Duminica la ora 6 | 1965 | 9.9 | . 10 125616 | Genet parle d&#39;Angela Davis | 1970 | 9.9 | . 11 131247 | Gong fu qi jie | 1979 | 9.9 | . 12 145429 | Himala | 1982 | 9.9 | . 13 153301 | Huttyn | 1996 | 9.9 | . 14 163898 | Ivan Groznyj III | 1988 | 9.9 | . 15 171541 | Jnos vitz | 1973 | 9.9 | . 16 205227 | Marche des femmes Hendaye, La | 1975 | 9.9 | . 17 227596 | Napolon Bonaparte | 1934 | 9.9 | . 18 230568 | New Clear Farm | 1998 | 9.9 | . 19 230864 | New World, The | 1982 | 9.9 | . 20 246768 | Pair of Boots, A | 1962 | 9.9 | . 21 264084 | Prince Solitaire | 2003 | 9.9 | . 22 266013 | Prostitues de Lyon parlent, Les | 1975 | 9.9 | . 23 288249 | Sargam | 1995 | 9.9 | . 24 289646 | Scarmour | 1997 | 9.9 | . 25 289842 | Schalkse ruiters | 1997 | 9.9 | . 26 305294 | Slyozy kapali | 1982 | 9.9 | . 27 313896 | Star povesti cesk | 1953 | 9.9 | . 28 320483 | Svadba | 1944 | 9.9 | . 29 320710 | Svoga tela gospodar | 1957 | 9.9 | . 30 334747 | Together &amp; Alone | 1998 | 9.9 | . 31 343965 | Ubijtsi vykhodyat na dorogu | 1942 | 9.9 | . 32 347078 | Unicorn in the Garden, A | 1953 | 9.9 | . 33 351405 | Velnio nuotaka | 1973 | 9.9 | . 34 357173 | Voynata na taralezhite | 1979 | 9.9 | . 35 363633 | Whirlpool, The | 2003 | 9.9 | . 36 368865 | Wrestling with Shadows | 2000 | 9.9 | . 37 372074 | You Are Not I | 1981 | 9.9 | . 38 372443 | Young and Restless 2 | 1985 | 9.9 | . 39 374517 | Zenith | 2001 | 9.9 | . &quot;SHOW WARNINGS;&quot; .",
            "url": "https://aravindh1293.github.io/blog/2022/10/11/SQL-Data-Manipulation.html",
            "relUrl": "/2022/10/11/SQL-Data-Manipulation.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aravindh1293.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://aravindh1293.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aravindh1293.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}